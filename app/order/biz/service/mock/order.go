// Code generated by MockGen. DO NOT EDIT.
// Source: app/order/biz/service/service.go

// Package mock is a generated GoMock package.
package mock

import (
	order "TikTokMall/app/order/kitex_gen/order"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// ListOrder mocks base method.
func (m *MockOrderService) ListOrder(ctx context.Context, req *order.ListOrderReq) (*order.ListOrderResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrder", ctx, req)
	ret0, _ := ret[0].(*order.ListOrderResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrder indicates an expected call of ListOrder.
func (mr *MockOrderServiceMockRecorder) ListOrder(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrder", reflect.TypeOf((*MockOrderService)(nil).ListOrder), ctx, req)
}

// MarkOrderPaid mocks base method.
func (m *MockOrderService) MarkOrderPaid(ctx context.Context, req *order.MarkOrderPaidReq) (*order.MarkOrderPaidResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkOrderPaid", ctx, req)
	ret0, _ := ret[0].(*order.MarkOrderPaidResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkOrderPaid indicates an expected call of MarkOrderPaid.
func (mr *MockOrderServiceMockRecorder) MarkOrderPaid(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOrderPaid", reflect.TypeOf((*MockOrderService)(nil).MarkOrderPaid), ctx, req)
}

// PlaceOrder mocks base method.
func (m *MockOrderService) PlaceOrder(ctx context.Context, req *order.PlaceOrderReq) (*order.PlaceOrderResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceOrder", ctx, req)
	ret0, _ := ret[0].(*order.PlaceOrderResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceOrder indicates an expected call of PlaceOrder.
func (mr *MockOrderServiceMockRecorder) PlaceOrder(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrder", reflect.TypeOf((*MockOrderService)(nil).PlaceOrder), ctx, req)
}
